/*
Merchant APIs

Technical document APIs for Merchant APIs

API version: 6.0
Contact: duong.vu@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_merchant_apis

import (
	"encoding/json"
)

// checks if the ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore{}

// ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore struct for ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore
type ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore struct {
	// Store name in Vietnamese
	NameVi *string `json:"name_vi,omitempty"`
	// Store name in English
	NameEn *string `json:"name_en,omitempty"`
}

// NewResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore instantiates a new ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore() *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore {
	this := ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore{}
	return &this
}

// NewResponseCheckMultipleSchemaDataInnerRedemptionsUsedStoreWithDefaults instantiates a new ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseCheckMultipleSchemaDataInnerRedemptionsUsedStoreWithDefaults() *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore {
	this := ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore{}
	return &this
}

// GetNameVi returns the NameVi field value if set, zero value otherwise.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) GetNameVi() string {
	if o == nil || IsNil(o.NameVi) {
		var ret string
		return ret
	}
	return *o.NameVi
}

// GetNameViOk returns a tuple with the NameVi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) GetNameViOk() (*string, bool) {
	if o == nil || IsNil(o.NameVi) {
		return nil, false
	}
	return o.NameVi, true
}

// HasNameVi returns a boolean if a field has been set.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) HasNameVi() bool {
	if o != nil && !IsNil(o.NameVi) {
		return true
	}

	return false
}

// SetNameVi gets a reference to the given string and assigns it to the NameVi field.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) SetNameVi(v string) {
	o.NameVi = &v
}

// GetNameEn returns the NameEn field value if set, zero value otherwise.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) GetNameEn() string {
	if o == nil || IsNil(o.NameEn) {
		var ret string
		return ret
	}
	return *o.NameEn
}

// GetNameEnOk returns a tuple with the NameEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) GetNameEnOk() (*string, bool) {
	if o == nil || IsNil(o.NameEn) {
		return nil, false
	}
	return o.NameEn, true
}

// HasNameEn returns a boolean if a field has been set.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) HasNameEn() bool {
	if o != nil && !IsNil(o.NameEn) {
		return true
	}

	return false
}

// SetNameEn gets a reference to the given string and assigns it to the NameEn field.
func (o *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) SetNameEn(v string) {
	o.NameEn = &v
}

func (o ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameVi) {
		toSerialize["name_vi"] = o.NameVi
	}
	if !IsNil(o.NameEn) {
		toSerialize["name_en"] = o.NameEn
	}
	return toSerialize, nil
}

type NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore struct {
	value *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore
	isSet bool
}

func (v NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) Get() *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore {
	return v.value
}

func (v *NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) Set(val *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore(val *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) *NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore {
	return &NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore{value: val, isSet: true}
}

func (v NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


