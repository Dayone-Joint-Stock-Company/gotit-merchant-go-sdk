/*
Merchant APIs

Technical document APIs for Merchant APIs

API version: 6.0
Contact: duong.vu@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit_merchant_apis

import (
	"encoding/json"
)

// checks if the ResponseReservedSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseReservedSchema{}

// ResponseReservedSchema struct for ResponseReservedSchema
type ResponseReservedSchema struct {
	Success *bool `json:"success,omitempty"`
	// Result code if failed. In case of successful request: value is null
	ReturnCode NullableString `json:"return_code,omitempty"`
	// Message notification in English
	MessageEn *string `json:"message_en,omitempty"`
	// Message notification in Vietnamese
	MessageVi *string `json:"message_vi,omitempty"`
	UsedStore *ResponseReservedSchemaUsedStore `json:"used_store,omitempty"`
	// Bill number
	BillNumber *string `json:"bill_number,omitempty"`
	// Detail items of voucher, if result is failed, response will return the first voucher code which is invalid
	Data []ResponseReservedSchemaDataInner `json:"data,omitempty"`
}

// NewResponseReservedSchema instantiates a new ResponseReservedSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseReservedSchema() *ResponseReservedSchema {
	this := ResponseReservedSchema{}
	return &this
}

// NewResponseReservedSchemaWithDefaults instantiates a new ResponseReservedSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseReservedSchemaWithDefaults() *ResponseReservedSchema {
	this := ResponseReservedSchema{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ResponseReservedSchema) SetSuccess(v bool) {
	o.Success = &v
}

// GetReturnCode returns the ReturnCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseReservedSchema) GetReturnCode() string {
	if o == nil || IsNil(o.ReturnCode.Get()) {
		var ret string
		return ret
	}
	return *o.ReturnCode.Get()
}

// GetReturnCodeOk returns a tuple with the ReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseReservedSchema) GetReturnCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnCode.Get(), o.ReturnCode.IsSet()
}

// HasReturnCode returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasReturnCode() bool {
	if o != nil && o.ReturnCode.IsSet() {
		return true
	}

	return false
}

// SetReturnCode gets a reference to the given NullableString and assigns it to the ReturnCode field.
func (o *ResponseReservedSchema) SetReturnCode(v string) {
	o.ReturnCode.Set(&v)
}
// SetReturnCodeNil sets the value for ReturnCode to be an explicit nil
func (o *ResponseReservedSchema) SetReturnCodeNil() {
	o.ReturnCode.Set(nil)
}

// UnsetReturnCode ensures that no value is present for ReturnCode, not even an explicit nil
func (o *ResponseReservedSchema) UnsetReturnCode() {
	o.ReturnCode.Unset()
}

// GetMessageEn returns the MessageEn field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetMessageEn() string {
	if o == nil || IsNil(o.MessageEn) {
		var ret string
		return ret
	}
	return *o.MessageEn
}

// GetMessageEnOk returns a tuple with the MessageEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetMessageEnOk() (*string, bool) {
	if o == nil || IsNil(o.MessageEn) {
		return nil, false
	}
	return o.MessageEn, true
}

// HasMessageEn returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasMessageEn() bool {
	if o != nil && !IsNil(o.MessageEn) {
		return true
	}

	return false
}

// SetMessageEn gets a reference to the given string and assigns it to the MessageEn field.
func (o *ResponseReservedSchema) SetMessageEn(v string) {
	o.MessageEn = &v
}

// GetMessageVi returns the MessageVi field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetMessageVi() string {
	if o == nil || IsNil(o.MessageVi) {
		var ret string
		return ret
	}
	return *o.MessageVi
}

// GetMessageViOk returns a tuple with the MessageVi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetMessageViOk() (*string, bool) {
	if o == nil || IsNil(o.MessageVi) {
		return nil, false
	}
	return o.MessageVi, true
}

// HasMessageVi returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasMessageVi() bool {
	if o != nil && !IsNil(o.MessageVi) {
		return true
	}

	return false
}

// SetMessageVi gets a reference to the given string and assigns it to the MessageVi field.
func (o *ResponseReservedSchema) SetMessageVi(v string) {
	o.MessageVi = &v
}

// GetUsedStore returns the UsedStore field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetUsedStore() ResponseReservedSchemaUsedStore {
	if o == nil || IsNil(o.UsedStore) {
		var ret ResponseReservedSchemaUsedStore
		return ret
	}
	return *o.UsedStore
}

// GetUsedStoreOk returns a tuple with the UsedStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetUsedStoreOk() (*ResponseReservedSchemaUsedStore, bool) {
	if o == nil || IsNil(o.UsedStore) {
		return nil, false
	}
	return o.UsedStore, true
}

// HasUsedStore returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasUsedStore() bool {
	if o != nil && !IsNil(o.UsedStore) {
		return true
	}

	return false
}

// SetUsedStore gets a reference to the given ResponseReservedSchemaUsedStore and assigns it to the UsedStore field.
func (o *ResponseReservedSchema) SetUsedStore(v ResponseReservedSchemaUsedStore) {
	o.UsedStore = &v
}

// GetBillNumber returns the BillNumber field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetBillNumber() string {
	if o == nil || IsNil(o.BillNumber) {
		var ret string
		return ret
	}
	return *o.BillNumber
}

// GetBillNumberOk returns a tuple with the BillNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetBillNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BillNumber) {
		return nil, false
	}
	return o.BillNumber, true
}

// HasBillNumber returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasBillNumber() bool {
	if o != nil && !IsNil(o.BillNumber) {
		return true
	}

	return false
}

// SetBillNumber gets a reference to the given string and assigns it to the BillNumber field.
func (o *ResponseReservedSchema) SetBillNumber(v string) {
	o.BillNumber = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResponseReservedSchema) GetData() []ResponseReservedSchemaDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []ResponseReservedSchemaDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseReservedSchema) GetDataOk() ([]ResponseReservedSchemaDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResponseReservedSchema) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ResponseReservedSchemaDataInner and assigns it to the Data field.
func (o *ResponseReservedSchema) SetData(v []ResponseReservedSchemaDataInner) {
	o.Data = v
}

func (o ResponseReservedSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseReservedSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if o.ReturnCode.IsSet() {
		toSerialize["return_code"] = o.ReturnCode.Get()
	}
	if !IsNil(o.MessageEn) {
		toSerialize["message_en"] = o.MessageEn
	}
	if !IsNil(o.MessageVi) {
		toSerialize["message_vi"] = o.MessageVi
	}
	if !IsNil(o.UsedStore) {
		toSerialize["used_store"] = o.UsedStore
	}
	if !IsNil(o.BillNumber) {
		toSerialize["bill_number"] = o.BillNumber
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableResponseReservedSchema struct {
	value *ResponseReservedSchema
	isSet bool
}

func (v NullableResponseReservedSchema) Get() *ResponseReservedSchema {
	return v.value
}

func (v *NullableResponseReservedSchema) Set(val *ResponseReservedSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseReservedSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseReservedSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseReservedSchema(val *ResponseReservedSchema) *NullableResponseReservedSchema {
	return &NullableResponseReservedSchema{value: val, isSet: true}
}

func (v NullableResponseReservedSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseReservedSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


