/*
Merchant APIs

Technical document APIs for Merchant APIs

API version: 6.0
Contact: duong.vu@gotit.vn
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gotit-merchant-apis

import (
	"encoding/json"
)

// checks if the ResponseMarkUseMultipleSchemaDataInnerRedemptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseMarkUseMultipleSchemaDataInnerRedemptions{}

// ResponseMarkUseMultipleSchemaDataInnerRedemptions Include information related to the use of the voucher (all types)
type ResponseMarkUseMultipleSchemaDataInnerRedemptions struct {
	// Contains redeemed SKU information of the voucher (for voucher type is conditional and support sku)
	RedeemSkuCodes []ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner `json:"redeem_sku_codes,omitempty"`
	// Actual redemption value of voucher type = conditional
	RedemptionValue *int32 `json:"redemption_value,omitempty"`
	UsedStore *ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore `json:"used_store,omitempty"`
	// Date voucher marked as used in case the voucher has been redeemed. Format (YYYY-MM-DD HH:MM:SS)
	UsedDate *string `json:"used_date,omitempty"`
}

// NewResponseMarkUseMultipleSchemaDataInnerRedemptions instantiates a new ResponseMarkUseMultipleSchemaDataInnerRedemptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseMarkUseMultipleSchemaDataInnerRedemptions() *ResponseMarkUseMultipleSchemaDataInnerRedemptions {
	this := ResponseMarkUseMultipleSchemaDataInnerRedemptions{}
	return &this
}

// NewResponseMarkUseMultipleSchemaDataInnerRedemptionsWithDefaults instantiates a new ResponseMarkUseMultipleSchemaDataInnerRedemptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseMarkUseMultipleSchemaDataInnerRedemptionsWithDefaults() *ResponseMarkUseMultipleSchemaDataInnerRedemptions {
	this := ResponseMarkUseMultipleSchemaDataInnerRedemptions{}
	return &this
}

// GetRedeemSkuCodes returns the RedeemSkuCodes field value if set, zero value otherwise.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetRedeemSkuCodes() []ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner {
	if o == nil || IsNil(o.RedeemSkuCodes) {
		var ret []ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner
		return ret
	}
	return o.RedeemSkuCodes
}

// GetRedeemSkuCodesOk returns a tuple with the RedeemSkuCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetRedeemSkuCodesOk() ([]ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner, bool) {
	if o == nil || IsNil(o.RedeemSkuCodes) {
		return nil, false
	}
	return o.RedeemSkuCodes, true
}

// HasRedeemSkuCodes returns a boolean if a field has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) HasRedeemSkuCodes() bool {
	if o != nil && !IsNil(o.RedeemSkuCodes) {
		return true
	}

	return false
}

// SetRedeemSkuCodes gets a reference to the given []ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner and assigns it to the RedeemSkuCodes field.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) SetRedeemSkuCodes(v []ResponseCheckMultipleSchemaDataInnerRedemptionsRedeemSkuCodesInner) {
	o.RedeemSkuCodes = v
}

// GetRedemptionValue returns the RedemptionValue field value if set, zero value otherwise.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetRedemptionValue() int32 {
	if o == nil || IsNil(o.RedemptionValue) {
		var ret int32
		return ret
	}
	return *o.RedemptionValue
}

// GetRedemptionValueOk returns a tuple with the RedemptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetRedemptionValueOk() (*int32, bool) {
	if o == nil || IsNil(o.RedemptionValue) {
		return nil, false
	}
	return o.RedemptionValue, true
}

// HasRedemptionValue returns a boolean if a field has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) HasRedemptionValue() bool {
	if o != nil && !IsNil(o.RedemptionValue) {
		return true
	}

	return false
}

// SetRedemptionValue gets a reference to the given int32 and assigns it to the RedemptionValue field.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) SetRedemptionValue(v int32) {
	o.RedemptionValue = &v
}

// GetUsedStore returns the UsedStore field value if set, zero value otherwise.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetUsedStore() ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore {
	if o == nil || IsNil(o.UsedStore) {
		var ret ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore
		return ret
	}
	return *o.UsedStore
}

// GetUsedStoreOk returns a tuple with the UsedStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetUsedStoreOk() (*ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore, bool) {
	if o == nil || IsNil(o.UsedStore) {
		return nil, false
	}
	return o.UsedStore, true
}

// HasUsedStore returns a boolean if a field has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) HasUsedStore() bool {
	if o != nil && !IsNil(o.UsedStore) {
		return true
	}

	return false
}

// SetUsedStore gets a reference to the given ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore and assigns it to the UsedStore field.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) SetUsedStore(v ResponseCheckMultipleSchemaDataInnerRedemptionsUsedStore) {
	o.UsedStore = &v
}

// GetUsedDate returns the UsedDate field value if set, zero value otherwise.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetUsedDate() string {
	if o == nil || IsNil(o.UsedDate) {
		var ret string
		return ret
	}
	return *o.UsedDate
}

// GetUsedDateOk returns a tuple with the UsedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) GetUsedDateOk() (*string, bool) {
	if o == nil || IsNil(o.UsedDate) {
		return nil, false
	}
	return o.UsedDate, true
}

// HasUsedDate returns a boolean if a field has been set.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) HasUsedDate() bool {
	if o != nil && !IsNil(o.UsedDate) {
		return true
	}

	return false
}

// SetUsedDate gets a reference to the given string and assigns it to the UsedDate field.
func (o *ResponseMarkUseMultipleSchemaDataInnerRedemptions) SetUsedDate(v string) {
	o.UsedDate = &v
}

func (o ResponseMarkUseMultipleSchemaDataInnerRedemptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseMarkUseMultipleSchemaDataInnerRedemptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RedeemSkuCodes) {
		toSerialize["redeem_sku_codes"] = o.RedeemSkuCodes
	}
	if !IsNil(o.RedemptionValue) {
		toSerialize["redemption_value"] = o.RedemptionValue
	}
	if !IsNil(o.UsedStore) {
		toSerialize["used_store"] = o.UsedStore
	}
	if !IsNil(o.UsedDate) {
		toSerialize["used_date"] = o.UsedDate
	}
	return toSerialize, nil
}

type NullableResponseMarkUseMultipleSchemaDataInnerRedemptions struct {
	value *ResponseMarkUseMultipleSchemaDataInnerRedemptions
	isSet bool
}

func (v NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) Get() *ResponseMarkUseMultipleSchemaDataInnerRedemptions {
	return v.value
}

func (v *NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) Set(val *ResponseMarkUseMultipleSchemaDataInnerRedemptions) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseMarkUseMultipleSchemaDataInnerRedemptions(val *ResponseMarkUseMultipleSchemaDataInnerRedemptions) *NullableResponseMarkUseMultipleSchemaDataInnerRedemptions {
	return &NullableResponseMarkUseMultipleSchemaDataInnerRedemptions{value: val, isSet: true}
}

func (v NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseMarkUseMultipleSchemaDataInnerRedemptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


